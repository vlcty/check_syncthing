#!/usr/bin/perl
# check_syncthing - Monitor you syncthing daemon
# Copyright (C) 2016-2017 Josef 'veloc1ty' Stautner (hello@veloc1ty.de)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use LWP::UserAgent;
use LWP::Protocol::https;
use JSON;
use Getopt::Long;

our $ARG_API_URL = '';
our $ARG_API_KEY = '';
our $ARG_SPECIFIC_DEVICE_ID = '';

our $LIMIT_MIN_CONNECTED_ENDPOINTS_CRIT = 0;
our $LIMIT_MIN_CONNECTED_ENDPOINTS_WARN = 1;

sub exitOK {
    printf("OK - %s\n", shift);
    exit(0);
}

sub exitWarning {
    printf("WARNING - %s\n", shift);
    exit(1);
}

sub exitCritical {
    printf("CRITICAL - %s\n", shift);
    exit(2);
}

sub exitUnknown {
    printf("UNKNOWN - %s\n", shift);
    exit(3);
}

sub parseArguments {
    GetOptions(
        'syncthing-url=s' => \$ARG_API_URL,
        'api-key=s' => \$ARG_API_KEY,
        'device-id=s' => \$ARG_SPECIFIC_DEVICE_ID,
        'min-connected-endpoints-warn=i' =>
            \$LIMIT_MIN_CONNECTED_ENDPOINTS_WARN,
        'min-connected-endpoints-crit=i' =>
            \$LIMIT_MIN_CONNECTED_ENDPOINTS_CRIT
    );
}

sub validateArguments {
    if ( length($ARG_API_URL) == 0 ) {
        exitUnknown('--syncthing-url not provided');
    }

    if ( $ARG_API_URL !~ /^(http|https).*$/ ) {
        exitUnknown('--syncthing-url not valid')
    }

    if ( length($ARG_API_KEY) == 0 ) {
        exitUnknown('--api-key not given');
    }

    if ( $LIMIT_MIN_CONNECTED_ENDPOINTS_WARN <
        $LIMIT_MIN_CONNECTED_ENDPOINTS_CRIT ) {
        exitUnknown('Minimum connected endpoints warn value is smaller ' .
            'than critical value');
    }

    if ( length($ARG_SPECIFIC_DEVICE_ID) != 0 &&
        $ARG_SPECIFIC_DEVICE_ID !~ /(\w{7}-){7}\w{7}/ ) {
            exitUnknown('Device ID is not valid');
    }
}

sub prepareUserAgent {
    my $userAgent = LWP::UserAgent->new(
        'agent' => 'check_syncthing',
        'timeout' => 10
    );

    $userAgent->ssl_opts( verify_hostname => 0 ,SSL_verify_mode => 0x00);
    $userAgent->default_header( 'X-API-Key' => $ARG_API_KEY );

    return $userAgent;
}

sub getFoldersForClient {
    my $lwp = prepareUserAgent();
    my $result = $lwp->get(sprintf('%s/rest/system/config', $ARG_API_URL));
    my @folders = ();

    if ( $result->is_success ) {
        my $config = decode_json($result->decoded_content);

        foreach my $currentFolder ( @{$config->{'folders'}} ) {
            foreach my $currentDevice ( @{$currentFolder->{'devices'}} ) {
                if ( $currentDevice->{'deviceID'} eq $ARG_SPECIFIC_DEVICE_ID ) {
                    push(@folders, $currentFolder->{'id'});
                    last;
                }
            }
        }
    }
    else {
        exitCritical('Was not able to retrieve config');
    }

    return @folders;
}

sub getCompletitionForFolderAndDevice {
    my $wantedFolder = shift;
    my $lwp = prepareUserAgent();

    my $response = $lwp->get(sprintf(
        '%s/rest/db/completion?folder=%s&device=%s',
        $ARG_API_URL,$wantedFolder, $ARG_SPECIFIC_DEVICE_ID));

    if ( $response->is_success ) {
        my $json = decode_json($response->decoded_content);

        if ( $json->{completion} < 100 ) {
            return 'syncing';
        }
        else {
            return 'in-sync';
        }
    }
    else {
        exitCritical('Was not able to retrieve completition state '. $response->status_line);
    }
}

sub getAllKnownDevices {
    my $userAgent = shift;
    my $connections = undef;

    my $response = $userAgent->get(sprintf('%s/rest/system/connections',
        $ARG_API_URL));

    if ( $response->is_success ) {
        my $content = decode_json($response->decoded_content);
        $connections = $content->{'connections'};
    }
    else {
        exitCritical(sprintf('HTTP Code: %d - Failed to read API response',
            $response->status_line));
    }

    return $connections;
}

sub getConnectedEndpointStats {
    my $userAgent = shift;
    my $knownEndpoints = 0;
    my $connectedEndpoints = 0;
    my $connections = getAllKnownDevices($userAgent);

    foreach my $currentConnection ( keys %{$connections} ) {
        $knownEndpoints++;

        # Is the device connected?
        if ( $connections->{$currentConnection}->{'connected'} == JSON::true ) {
                $connectedEndpoints++;
        }
    }

    # Decrement $knownEndpoints by 1 because the current syncthing
    # instance is listet as a client
    $knownEndpoints--;

    # Build performance data string
    my $performanceData = sprintf('|knownEndpoints=%d ' .
        'connectedEndpoints=%d;%d;%d',
        $knownEndpoints,
        $connectedEndpoints,
        $LIMIT_MIN_CONNECTED_ENDPOINTS_WARN,
        $LIMIT_MIN_CONNECTED_ENDPOINTS_CRIT);

    # Check limits
    if ( $connectedEndpoints < $LIMIT_MIN_CONNECTED_ENDPOINTS_CRIT ) {
        exitCritical(
            sprintf("%d of %d endpoints are connected. Minimum is %d%s",
                $connectedEndpoints,
                $knownEndpoints,
                $LIMIT_MIN_CONNECTED_ENDPOINTS_CRIT,
                $performanceData));
    }
    elsif ( $connectedEndpoints < $LIMIT_MIN_CONNECTED_ENDPOINTS_WARN ) {
        printf("WARNING - %d of %d endpoints are connected. Minimum is %d%s\n",
            $connectedEndpoints,
            $knownEndpoints,
            $LIMIT_MIN_CONNECTED_ENDPOINTS_WARN,
            $performanceData);

        exit(1);
    }
    else {
        exitOK(sprintf('%d of %d endpoints are connected%s',
            $connectedEndpoints,
            $knownEndpoints,
            $performanceData));
    }
}

sub getSingleDeviceStat {
    my $userAgent = shift;
    my $connections = getAllKnownDevices($userAgent);

    if ( exists($connections->{$ARG_SPECIFIC_DEVICE_ID}) ) {
        my $endpoint = $connections->{$ARG_SPECIFIC_DEVICE_ID};

        if ( $endpoint->{'connected'} == JSON::true) {
            my $folderSyncingString = '';

            foreach my $currentFolder ( getFoldersForClient() ) {
                if ( getCompletitionForFolderAndDevice($currentFolder) eq
                    'syncing' ) {
                        $folderSyncingString .= $currentFolder . ',';
                    }
            }
            chop($folderSyncingString);

            if ( length($folderSyncingString) == 0 ) {
                exitOK(sprintf('Device %s is connected and in sync',
                    $ARG_SPECIFIC_DEVICE_ID));
            }
            else {
                exitWarning(sprintf('Device %s is connected but not in sync',
                    'ARG_SPECIFIC_DEVICE_ID'));
            }
        }
        else {
            exitCritical(sprintf('Device %s is NOT connected',
                $ARG_SPECIFIC_DEVICE_ID));
        }
    }
    else {
        exitCritical(sprintf('Device %s is not known on this node',
            $ARG_SPECIFIC_DEVICE_ID));
    }
}

sub main {
    parseArguments();
    validateArguments();

    my $userAgent = prepareUserAgent();

    if ( length($ARG_SPECIFIC_DEVICE_ID) == 0 ) {
        getConnectedEndpointStats($userAgent);
    }
    else {
        getSingleDeviceStat($userAgent);
    }
}

main();
